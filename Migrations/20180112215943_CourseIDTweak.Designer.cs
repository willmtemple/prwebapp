// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PeerReviewWeb.Data;
using System;

namespace PeerReviewWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180112215943_CourseIDTweak")]
    partial class CourseIDTweak
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<Guid?>("CourseID");

                    b.Property<Guid?>("CourseID1");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.HasIndex("CourseID1");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.CourseModels.Assignment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Closes");

                    b.Property<Guid?>("CourseID");

                    b.Property<Guid?>("CourseID1");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Opens");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("CourseID1");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.CourseModels.AssignmentStage", b =>
                {
                    b.Property<Guid>("AssignmentId");

                    b.Property<string>("Id");

                    b.Property<string>("Instructions");

                    b.HasKey("AssignmentId", "Id");

                    b.ToTable("AssignmentStage");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.CourseModels.Course", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OwnerEmail");

                    b.HasKey("ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.CourseModels.Group", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AssignmentID");

                    b.Property<int>("CurrentStage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("ID");

                    b.HasIndex("AssignmentID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.JoinTagModels.CourseJoinTag", b =>
                {
                    b.Property<Guid>("CourseId");

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("Role");

                    b.HasKey("CourseId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("CourseJoinTag");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.JoinTagModels.GroupJoinTag", b =>
                {
                    b.Property<Guid>("GroupId");

                    b.Property<string>("ApplicationUserId");

                    b.HasKey("GroupId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("GroupJoinTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeerReviewWeb.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeerReviewWeb.Models.ApplicationUser", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.CourseModels.Course")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseID");

                    b.HasOne("PeerReviewWeb.Models.CourseModels.Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseID1");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.CourseModels.Assignment", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.CourseModels.Course")
                        .WithMany("ActiveAssignments")
                        .HasForeignKey("CourseID");

                    b.HasOne("PeerReviewWeb.Models.CourseModels.Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseID1");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.CourseModels.AssignmentStage", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.CourseModels.Assignment", "Assignment")
                        .WithMany("Stages")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeerReviewWeb.Models.CourseModels.Group", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.CourseModels.Assignment", "Assignment")
                        .WithMany("Groups")
                        .HasForeignKey("AssignmentID");
                });

            modelBuilder.Entity("PeerReviewWeb.Models.JoinTagModels.CourseJoinTag", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Courses")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeerReviewWeb.Models.CourseModels.Course", "Course")
                        .WithMany("Affiliates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PeerReviewWeb.Models.JoinTagModels.GroupJoinTag", b =>
                {
                    b.HasOne("PeerReviewWeb.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Groups")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeerReviewWeb.Models.CourseModels.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
